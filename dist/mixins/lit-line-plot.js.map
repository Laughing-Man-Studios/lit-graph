{"version":3,"file":"lit-line-plot.js","sourceRoot":"","sources":["../../src/mixins/lit-line-plot.ts"],"names":[],"mappings":"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","sourcesContent":["import {css, LitElement, svg, TemplateResult} from 'lit';\nimport {AXIS, AXIS_TYPE, GRAPH} from '../constants';\nimport {PlotData, AxisType, GraphMeta, AxisMeta, NUM_AXIS_TYPE} from '../types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Constructor<T = {}> = new (...args: any[]) => T;\ntype RenderElements = {\n    circles: Array<TemplateResult>;\n    lines: Array<TemplateResult>;\n};\n\nexport declare class LitLinePlotInterface {\n    renderLinePlot(data: PlotData, axisData: GraphMeta): unknown;\n}\n\nexport const LitLinePlotMixin = <T extends Constructor<LitElement>>(\n    superClass: T\n) => {\n    class LitLinePlotClass extends superClass {\n        static styles = [\n            (superClass as unknown as typeof LitElement).styles ?? [],\n            css`\n                #PlotCircles circle {\n                    r: 1.5;\n                }\n\n                #PlotLines line {\n                    stroke: black;\n                }\n            `,\n        ];\n\n        private generateStringAxisPosition(\n            plot: string,\n            data: AxisMeta<AXIS_TYPE.STRING>,\n            axis: AXIS\n        ): number {\n            const {START, END} = GRAPH[axis];\n\n            const plotIndex = data.indexOf(plot);\n\n            if (plotIndex < 0) {\n                throw new Error('String Plot doesnt exist in axis data');\n            }\n\n            return (END - START) * (plotIndex / data.length);\n        }\n\n        private generateNumAxisPosition(\n            plot: number,\n            data: AxisMeta<NUM_AXIS_TYPE>,\n            axis: AXIS\n        ): number {\n            const {START, END} = GRAPH[axis];\n            const position =\n                ((END - START) * (plot - data.begin)) / (data.end - data.begin);\n\n            if (axis === AXIS.Y) {\n                return END - position;\n            }\n\n            return position;\n        }\n\n        private getAxisPosition(\n            plot: AxisType,\n            data: AxisMeta<AXIS_TYPE>,\n            axis: AXIS\n        ): number {\n            let massagedPlot = plot;\n            if (Array.isArray(data)) {\n                if (typeof massagedPlot === 'string') {\n                    return this.generateStringAxisPosition(\n                        massagedPlot,\n                        data,\n                        axis\n                    );\n                }\n                throw new Error(\n                    'Axis Data is of type string but plot is Number'\n                );\n            } else if (data.type === AXIS_TYPE.DATE) {\n                if (typeof massagedPlot === 'string') {\n                    massagedPlot = Date.parse(massagedPlot);\n                } else {\n                    throw new Error(\n                        'Axis Data is of type date but plot is Number'\n                    );\n                }\n            } else if (\n                data.type === AXIS_TYPE.NUMBER &&\n                typeof massagedPlot !== 'number'\n            ) {\n                throw new Error(\n                    'Axis Data is of type number but plot is String'\n                );\n            }\n\n            return this.generateNumAxisPosition(\n                massagedPlot as number,\n                data,\n                axis\n            );\n        }\n\n        private getElements(\n            data: PlotData,\n            axisData: GraphMeta\n        ): RenderElements {\n            const renderElements: RenderElements = {circles: [], lines: []};\n            let prev: {x: number; y: number} | null = null;\n\n            for (let i = 0; i < data.length; i++) {\n                const current = data[i];\n                const x = this.getAxisPosition(current.x, axisData.x, AXIS.X);\n                const y = this.getAxisPosition(current.y, axisData.y, AXIS.Y);\n\n                renderElements.circles.push(\n                    svg`<circle cx=\"${x}\" cy=\"${y}\" />`\n                );\n\n                if (prev) {\n                    renderElements.lines.push(svg`\n                            <line x1=\"${prev.x}\" y1=\"${prev.y}\" x2=\"${x}\" y2=\"${y}\" />\n                        `);\n                }\n\n                prev = {x, y};\n            }\n\n            return renderElements;\n        }\n\n        renderLinePlot(data: PlotData, axisData: GraphMeta) {\n            const {circles, lines} = this.getElements(data, axisData);\n\n            return svg`\n                <g id=\"PlotCircles\">\n                    ${circles}\n                </g>\n                <g id=\"PlotLines\">\n                    ${lines}\n                </g>\n            `;\n        }\n    }\n\n    return LitLinePlotClass as Constructor<LitLinePlotInterface> & T;\n};\n"]}