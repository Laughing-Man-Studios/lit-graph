{"version":3,"file":"lit-line-plot.js","sourceRoot":"","sources":["../../src/mixins/lit-line-plot.ts"],"names":[],"mappings":"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","sourcesContent":["import { css, LitElement, svg, TemplateResult } from 'lit';\nimport { AXIS, AXIS_TYPE, GRAPH } from '../constants';\nimport { PlotData, AxisType, AxisData, SingleAxisData, NUM_AXIS_TYPE } from '../types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Constructor<T = {}> = new (...args: any[]) => T;\ntype RenderElements = { circles: Array<TemplateResult>, lines: Array<TemplateResult> };\n\nexport declare class LitLinePlotInterface {\n    renderLinePlot(data: PlotData, axisData: AxisData<AXIS_TYPE, AXIS_TYPE>): unknown;\n}\n\nexport const LitLinePlotMixin = <T extends Constructor<LitElement>>(superClass: T) => {\n    class LitLinePlotClass extends superClass {\n\n        static styles = (css`\n            #PlotCircles circle {\n                r: 1.5;\n            }\n\n            #PlotLines line {\n                stroke: black;\n            }\n        `);\n\n        private generateStringAxisPosition(\n            plot: string, data: SingleAxisData<AXIS_TYPE.STRING>, axis: AXIS\n        ): number {\n            const { START, END } = GRAPH[axis];\n\n            const plotIndex = data.indexOf(plot);\n\n            if(plotIndex < 0) {\n                throw new Error('String Plot doesnt exist in axis data');\n            }\n\n            return (END - START) * (plotIndex/data.length);\n        }\n\n        private generateNumAxisPosition(\n            plot: number, data: SingleAxisData<NUM_AXIS_TYPE>, axis: AXIS\n        ): number {\n            const { START, END } = GRAPH[axis];\n            const position = (END - START) *  (plot - data.begin) / (data.end - data.begin);\n\n            if (axis === AXIS.Y) {\n                return END - position;\n            }\n\n            return position;\n        }\n\n        private getAxisPosition(\n            plot: AxisType, data: SingleAxisData<AXIS_TYPE>, axis: AXIS\n        ): number {\n            if (Array.isArray(data)) {\n                if (typeof plot === 'string') {\n                    return this.generateStringAxisPosition(plot, data, axis);\n                }\n                throw new Error('Axis Data is of type string but plot is Number');\n            }\n\n            if (typeof plot !== 'number') {\n                throw new Error('Axis Data is of type number but plot is String');\n            }\n\n            return this.generateNumAxisPosition(plot, data, axis);\n        }\n\n        private getElements(\n            data: PlotData, \n            axisData: AxisData<AXIS_TYPE, AXIS_TYPE> ): RenderElements {\n                const renderElements: RenderElements = { circles: [], lines: []};\n                let prev: { x: number, y: number} | null = null;\n\n                for (let i = 0; i < data.length; i++) {\n                    const current = data[i];\n                    const x = this.getAxisPosition(current.x, axisData.x, AXIS.X);\n                    const y = this.getAxisPosition(current.y, axisData.y, AXIS.Y);\n\n                    renderElements.circles.push(svg`<circle cx=\"${x}\" cy=\"${y}\" />`);\n\n                    if (prev) {\n                        renderElements.lines.push(svg`\n                            <line x1=\"${prev.x}\" y1=\"${prev.y}\" x2=\"${x}\" y2=\"${y}\" />\n                        `);\n                    }\n\n                    prev = { x, y };\n                }\n\n                return renderElements;\n        }\n\n        renderLinePlot(data: PlotData, axisData: AxisData<AXIS_TYPE, AXIS_TYPE>) {\n            const { circles, lines } = this.getElements(data, axisData);\n            \n            return (svg`\n                <g id=\"PlotCircles\">\n                    ${circles}\n                </g>\n                <g id=\"PlotLines\">\n                    ${lines}\n                </g>\n            `);\n        }\n    }\n\n    return LitLinePlotClass as Constructor<LitLinePlotInterface> & T;\n};"]}