{"version":3,"file":"lit-grid.js","sourceRoot":"","sources":["../../src/mixins/lit-grid.ts"],"names":[],"mappings":"AAAA,OAAO,EAAc,GAAG,EAAE,MAAM,KAAK,CAAC;AAUtC,MAAM,CAAC,MAAM,YAAY,GAAG,CAAoC,UAAa,EAAE,EAAE;IAC7E,MAAM,YAAa,SAAQ,UAAU;QAEzB,gBAAgB,CAAC,cAAsB;YAC3C,MAAM,YAAY,GAAG,EAAE,CAAC;YACxB,MAAM,QAAQ,GAAG,GAAG,GAAG,cAAc,CAAC;YACtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,IAAI,CAAC,EAAE;gBACxC,MAAM,MAAM,GAAG,QAAQ,GAAG,CAAC,CAAC;gBAC5B,YAAY,CAAC,IAAI,CAAC,GAAG,CAAA;+BACN,MAAM,OAAO,MAAM;;iBAEjC,CAAC,CAAC;aACN;YAED,OAAO,YAAY,CAAC;QACxB,CAAC;QAEO,gBAAgB,CAAC,cAAsB;YAC3C,MAAM,YAAY,GAAG,EAAE,CAAC;YACxB,MAAM,QAAQ,GAAG,GAAG,GAAG,cAAc,CAAC;YACtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,IAAI,CAAC,EAAE;gBACxC,MAAM,MAAM,GAAG,QAAQ,GAAG,CAAC,CAAC;gBAC5B,YAAY,CAAC,IAAI,CAAC,GAAG,CAAA;+CACU,MAAM,OAAO,MAAM;;iBAEjD,CAAC,CAAC;aACN;YAED,OAAO,YAAY,CAAC;QACxB,CAAC;QAED,UAAU,CAAC,cAA4B,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE;YACnD,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,WAAW,CAAC;YAC7B,OAAO,GAAG,CAAA;kBACJ,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;kBACxB,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;aAC7B,CAAC;QACN,CAAC;KACJ;IACD,OAAO,YAAiD,CAAC;AAC7D,CAAC,CAAC","sourcesContent":["import { LitElement, svg } from 'lit';\nimport { Axis } from '../types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Constructor<T = {}> = new (...args: any[]) => T;\n\nexport declare class LitGridInterface {\n    renderGrid(axisLengths?: Axis<number>): unknown;\n}\n\nexport const LitGridMixin = <T extends Constructor<LitElement>>(superClass: T) => {\n    class LitGridClass extends superClass {\n\n        private renderXAxisLines(xAxisSetLength: number) {\n            const lineElements = [];\n            const interval = 100 / xAxisSetLength;\n            for (let i = 1; i < xAxisSetLength; i += 1) {\n                const xCoord = interval * i;\n                lineElements.push(svg`\n                    <line x1=${xCoord} x2=${xCoord} y1=\"0\" y2=\"100\" \n                        stroke=\"gray\" stroke-width=\"0.5\" stroke-opacity=\"0.5\"/>\n                `);\n            }\n\n            return lineElements;\n        }\n\n        private renderYAxisLines(yAxisSetLength: number) {\n            const lineElements = [];\n            const interval = 100 / yAxisSetLength;\n            for (let i = 1; i < yAxisSetLength; i += 1) {\n                const yCoord = interval * i;\n                lineElements.push(svg`\n                    <line x1=\"0\" x2=\"100\" y1=${yCoord} y2=${yCoord} \n                        stroke=\"gray\" stroke-width=\"0.5\" stroke-opacity=\"0.5\" />\n                `);\n            }\n\n            return lineElements;\n        }\n\n        renderGrid(axisLengths: Axis<number> = { x: 10, y: 10 }) {\n            const { x, y } = axisLengths;\n            return svg`\n                ${this.renderXAxisLines(x)}\n                ${this.renderYAxisLines(y)}\n            `;\n        }\n    }\n    return LitGridClass as Constructor<LitGridInterface> & T;\n};"]}