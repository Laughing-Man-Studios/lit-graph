{"version":3,"file":"lit-grid.js","sourceRoot":"","sources":["../../src/mixins/lit-grid.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,GAAG,EAAC,MAAM,KAAK,CAAC;AACpC,OAAO,EAAC,IAAI,EAAE,KAAK,EAAC,MAAM,cAAc,CAAC;AAUzC,MAAM,CAAC,MAAM,YAAY,GAAG,CACxB,UAAa,EACf,EAAE;IACA,MAAM,YAAa,SAAQ,UAAU;QACzB,gBAAgB,CAAC,cAAsB;YAC3C,MAAM,YAAY,GAAG,EAAE,CAAC;YACxB,MAAM,EAAC,GAAG,EAAE,KAAK,EAAC,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACnC,MAAM,QAAQ,GAAG,GAAG,GAAG,cAAc,CAAC;YACtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,IAAI,CAAC,EAAE;gBACxC,MAAM,MAAM,GAAG,QAAQ,GAAG,CAAC,CAAC;gBAC5B,YAAY,CAAC,IAAI,CAAC,GAAG,CAAA;+BACN,MAAM,OAAO,MAAM,QAAQ,KAAK,SAAS,GAAG;;iBAE1D,CAAC,CAAC;aACN;YAED,OAAO,YAAY,CAAC;QACxB,CAAC;QAEO,gBAAgB,CAAC,cAAsB;YAC3C,MAAM,YAAY,GAAG,EAAE,CAAC;YACxB,MAAM,EAAC,GAAG,EAAE,KAAK,EAAC,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACnC,MAAM,QAAQ,GAAG,GAAG,GAAG,cAAc,CAAC;YACtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,IAAI,CAAC,EAAE;gBACxC,MAAM,MAAM,GAAG,QAAQ,GAAG,CAAC,CAAC;gBAC5B,YAAY,CAAC,IAAI,CAAC,GAAG,CAAA;gCACL,KAAK,SAAS,GAAG,QAAQ,MAAM,OAAO,MAAM;;iBAE3D,CAAC,CAAC;aACN;YAED,OAAO,YAAY,CAAC;QACxB,CAAC;QAED,UAAU,CAAC,cAAoC,EAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAC;YACzD,MAAM,EAAC,CAAC,EAAE,CAAC,EAAC,GAAG,WAAW,CAAC;YAC3B,OAAO,GAAG,CAAA;;sBAEA,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;;;sBAGxB,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;;aAEjC,CAAC;QACN,CAAC;KACJ;IACD,OAAO,YAAiD,CAAC;AAC7D,CAAC,CAAC","sourcesContent":["import {LitElement, svg} from 'lit';\nimport {AXIS, GRAPH} from '../constants';\nimport {Axis} from '../types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Constructor<T = {}> = new (...args: any[]) => T;\n\nexport declare class LitGridInterface {\n    renderGrid(axisLengths?: Axis<number, number>): unknown;\n}\n\nexport const LitGridMixin = <T extends Constructor<LitElement>>(\n    superClass: T\n) => {\n    class LitGridClass extends superClass {\n        private renderXAxisLines(xAxisSetLength: number) {\n            const lineElements = [];\n            const {END, START} = GRAPH[AXIS.Y];\n            const interval = END / xAxisSetLength;\n            for (let i = 1; i < xAxisSetLength; i += 1) {\n                const xCoord = interval * i;\n                lineElements.push(svg`\n                    <line x1=${xCoord} x2=${xCoord} y1=\"${START}\" y2=\"${END}\" \n                        stroke=\"gray\" stroke-width=\"0.5\" stroke-opacity=\"0.5\"/>\n                `);\n            }\n\n            return lineElements;\n        }\n\n        private renderYAxisLines(yAxisSetLength: number) {\n            const lineElements = [];\n            const {END, START} = GRAPH[AXIS.X];\n            const interval = END / yAxisSetLength;\n            for (let i = 1; i < yAxisSetLength; i += 1) {\n                const yCoord = interval * i;\n                lineElements.push(svg`\n                    <line x1=\"${START}\" x2=\"${END}\" y1=${yCoord} y2=${yCoord} \n                        stroke=\"gray\" stroke-width=\"0.5\" stroke-opacity=\"0.5\" />\n                `);\n            }\n\n            return lineElements;\n        }\n\n        renderGrid(axisLengths: Axis<number, number> = {x: 10, y: 10}) {\n            const {x, y} = axisLengths;\n            return svg`\n                <g id=\"xGridLines\">\n                    ${this.renderXAxisLines(x)}\n                </g>\n                <g id=\"yGridLines\">\n                    ${this.renderYAxisLines(y)}\n                </g>\n            `;\n        }\n    }\n    return LitGridClass as Constructor<LitGridInterface> & T;\n};\n"]}