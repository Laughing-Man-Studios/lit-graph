{"version":3,"file":"lit-axis.js","sourceRoot":"","sources":["../../src/mixins/lit-axis.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    LitElement,\n    nothing,\n    svg,\n    css,\n    TemplateResult,\n    PropertyValues,\n} from 'lit';\nimport {GraphMeta, NUM_AXIS_TYPE, AxisMeta} from '../types';\nimport {AXIS, AXIS_TYPE, GRAPH, LINE_WIDTH} from '../constants';\nimport {state} from 'lit/decorators.js';\nimport {ref, createRef} from 'lit/directives/ref.js';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Constructor<T = {}> = new (...args: any[]) => T;\ntype LabelRenderer = (val: number) => string | TemplateResult;\ntype LineElements = Array<TemplateResult>;\ntype LabelsArr = SVGTextElement[];\ntype UpdateLabelsArgs = {\n    labelsArr: LabelsArr;\n    END: number;\n    isYAxis: boolean;\n    spacing: number;\n};\n\nexport declare class LitAxisInterface {\n    renderAxis(axisData?: GraphMeta): unknown;\n    xEdge: number;\n    yEdge: number;\n}\n\nconst CONSTANTS = {\n    MEASUREMENT_OFFSET: -1,\n    SPACING_OFFSET: {\n        X: 5,\n        Y: 1,\n    },\n};\n\nconst defaults = {\n    x: {begin: 0, end: 9, interval: 1, type: 'number'},\n    y: {begin: 0, end: 9, interval: 1, type: 'number'},\n} as GraphMeta;\n\nexport const LitAxisMixin = <T extends Constructor<LitElement>>(\n    superClass: T\n) => {\n    class LitAxisClass extends superClass {\n        static styles = [\n            (superClass as unknown as typeof LitElement).styles ?? [],\n            css`\n                text {\n                    font-family: serif;\n                }\n                text.date,\n                text.string {\n                    font-size: 4px;\n                }\n                text.number {\n                    font-size: 6px;\n                }\n                #xLabels line {\n                    stroke-width: ${LINE_WIDTH};\n                }\n                #yLabels line {\n                    stroke-width: ${LINE_WIDTH};\n                }\n            `,\n        ];\n\n        @state()\n        private declare isLoading: boolean;\n\n        @state()\n        declare xEdge: number;\n\n        @state()\n        declare yEdge: number;\n\n        private labels = {\n            [AXIS.X]: createRef(),\n            [AXIS.Y]: createRef(),\n        };\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        constructor(...args: any[]) {\n            super(args);\n            this.isLoading = true;\n            this.xEdge = 0;\n            this.yEdge = 0;\n        }\n\n        /* Generator Methods */\n\n        private generateLine(axis: AXIS, lineElements: LineElements): void {\n            const X = GRAPH[AXIS.X];\n            const Y = GRAPH[AXIS.Y];\n\n            lineElements.push(svg`\n                <line\n                    x1=\"${X.START}\" \n                    y1=\"${axis === AXIS.X ? Y.END : Y.START}\" \n                    x2=\"${axis === AXIS.X ? X.END : X.START}\" \n                    y2=\"${Y.END}\"\n                    stoke-width=\"0.5\"\n                    stroke=\"black\"\n                >\n            `);\n        }\n\n        private generateLabels(\n            data: AxisMeta<AXIS_TYPE>,\n            lineElements: LineElements\n        ) {\n            if (Array.isArray(data)) {\n                this.generateStrLabels(data, lineElements);\n            } else {\n                this.generateDateNumLabels(data, lineElements);\n            }\n        }\n\n        private generateStrLabels(\n            data: Array<string>,\n            lineElements: LineElements\n        ): void {\n            for (let i = data.length; i > 0; i -= 1) {\n                lineElements.push(svg`\n                    <text \n                        x=\"0\" \n                        y=\"0\"\n                        class=\"${AXIS_TYPE.STRING}\">\n                            ${data[i]}\n                    </text>\n                `);\n            }\n        }\n\n        private generateLabelRenderer(\n            type: AXIS_TYPE,\n            interval: number\n        ): LabelRenderer {\n            if (type === AXIS_TYPE.NUMBER) {\n                return (val: number) => val.toString();\n            } else if (interval < 3600000) {\n                return (val: number) => new Date(val).toLocaleTimeString();\n            } else if (interval < 86400000) {\n                return (val: number) => {\n                    return svg`\n                        <tspan>\n                            ${new Date(val).toLocaleDateString()}\n                        </tspan>\n                        <tspan dy=\"0\" dx=\"0\">\n                            ${new Date(val).toLocaleTimeString('en-GB')}\n                        </tspan>\n                    `;\n                };\n            } else {\n                return (val: number) => new Date(val).toLocaleDateString();\n            }\n        }\n        private generateDateNumLabels(\n            data: AxisMeta<NUM_AXIS_TYPE>,\n            lineElements: LineElements\n        ): void {\n            const labelRenderer = this.generateLabelRenderer(\n                data.type,\n                data.interval\n            );\n\n            for (let i = data.begin; i < data.end + 1; i += data.interval) {\n                lineElements.push(svg`\n                    <text \n                        x=\"0\" \n                        y=\"0\"\n                        class=\"${data.type}\">\n                            ${labelRenderer(i)}\n                    </text>\n                `);\n            }\n        }\n\n        /* Update Methods */\n\n        private updateXDatePos(el: SVGTextElement): void {\n            const dateText = el.querySelectorAll('tspan');\n\n            if (dateText.length == 2) {\n                const [date, time] = dateText;\n\n                const {width, height} = date.getBBox();\n\n                time.setAttribute('dy', height.toString());\n                time.setAttribute('dx', (-width).toString());\n            }\n        }\n\n        private getDimensionAttr(\n            labelsArr: LabelsArr,\n            END: number,\n            isYAxis: boolean\n        ) {\n            const totalLabelSize = labelsArr.reduce((size, el) => {\n                if (!isYAxis) {\n                    this.updateXDatePos(el);\n                }\n                const {width, height} = el.getBBox();\n\n                return size + (isYAxis ? height : width);\n            }, 0);\n\n            return Math.max((END - totalLabelSize) / (labelsArr.length - 1), 0);\n        }\n\n        private updateLabels({\n            labelsArr,\n            END,\n            isYAxis,\n            spacing,\n        }: UpdateLabelsArgs): number {\n            const {SPACING_OFFSET} = CONSTANTS;\n            let currentPos = 0;\n            let labelEdge = 0;\n\n            labelsArr.forEach((el, idx) => {\n                const {width, height} = el.getBBox();\n                const spacingSize = isYAxis && idx === 0 ? 0 : spacing;\n                const x = isYAxis\n                    ? -(width + SPACING_OFFSET.Y)\n                    : currentPos - width / 2;\n                const y = isYAxis\n                    ? currentPos + spacingSize + height\n                    : END + SPACING_OFFSET.X + LINE_WIDTH;\n\n                el.setAttribute('x', x.toString());\n                el.setAttribute('y', y.toString());\n\n                currentPos += (isYAxis ? height : width) + spacingSize;\n\n                if (isYAxis && labelEdge > x) {\n                    labelEdge = x;\n                } else if (!isYAxis && labelEdge < y + height) {\n                    labelEdge = y + height;\n                }\n            });\n\n            return labelEdge;\n        }\n\n        private updateMeasurementLabels(axis: AXIS): number {\n            const isYAxis = axis === AXIS.Y;\n            const {END} = GRAPH[axis];\n            const axisElements = this.labels[axis].value as Element;\n\n            const labelsArr = Array.from(axisElements.querySelectorAll('text'));\n            const spacing = this.getDimensionAttr(labelsArr, END, isYAxis);\n\n            if (labelsArr.length < 1) {\n                throw new Error('Missing axis elements for updating');\n            }\n            if (isYAxis) {\n                labelsArr.reverse();\n            }\n\n            return this.updateLabels({labelsArr, END, isYAxis, spacing});\n        }\n\n        override firstUpdated(changedProperties: PropertyValues): void {\n            super.firstUpdated(changedProperties);\n            const xEdge = this.updateMeasurementLabels(AXIS.X);\n            const yEdge = this.updateMeasurementLabels(AXIS.Y);\n            setTimeout(() => {\n                this.isLoading = false;\n                this.xEdge = xEdge;\n                this.yEdge = yEdge;\n            });\n        }\n\n        private generateAxis(\n            data: AxisMeta<AXIS_TYPE>,\n            axis: AXIS\n        ): LineElements {\n            const lineElements: LineElements = [];\n            this.generateLine(axis, lineElements);\n            this.generateLabels(data, lineElements);\n\n            return lineElements;\n        }\n\n        renderAxis(axisData: GraphMeta = defaults): TemplateResult {\n            const {x, y} = axisData;\n\n            return svg`\n                <g id=\"xLabels\" ${ref(this.labels[AXIS.X])}>\n                    ${this.generateAxis(x, AXIS.X)}\n                </g>\n                <g id=\"yLabels\" ${ref(this.labels[AXIS.Y])}>\n                    ${this.generateAxis(y, AXIS.Y)}\n                </g>\n                ${\n                    this.isLoading\n                        ? svg`\n                    <rect x=\"-5\" y=\"0\" height=\"100%\" width=\"105%\" fill=\"white\" />\n                    <text x=\"45\" y=\"75\">Loading</text>\n                `\n                        : nothing\n                }\n            `;\n        }\n    }\n    return LitAxisClass as Constructor<LitAxisInterface> & T;\n};\n"]}