{"version":3,"file":"lit-axis.js","sourceRoot":"","sources":["../../src/mixins/lit-axis.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, nothing, svg, css, TemplateResult } from 'lit';\nimport { AxisData, NUM_AXIS_TYPE, SingleAxisData } from '../types';\nimport { AXIS, AXIS_TYPE, GRAPH } from '../constants';\nimport { state } from 'lit/decorators.js';\nimport { ref, createRef } from 'lit/directives/ref.js';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Constructor<T = {}> = new (...args: any[]) => T;\ntype LabelRenderer = (val: number) => string | TemplateResult;\ntype LineElements = Array<TemplateResult>;\ntype LabelsArr = SVGTextElement[];\n\nexport declare class LitAxisInterface {\n    renderAxis(axisData?: AxisData<AXIS_TYPE, AXIS_TYPE>): unknown;\n}\n\nconst CONSTANTS = {\n    MEASUREMENT_OFFSET: -1,\n    SPACING_OFFSET: {\n        X: 5,\n        Y: 1\n    }\n};\n\nconst defaults = {\n    x: { begin: 0, end: 9, interval: 1, type: 'number' },\n    y: { begin: 0, end: 9, interval: 1, type: 'number' }\n} as AxisData<AXIS_TYPE.NUMBER, AXIS_TYPE.NUMBER>;\n\nexport const LitAxisMixin = <T extends Constructor<LitElement>>(superClass: T) => {\n    class LitAxisClass extends superClass {\n\n    static styles = (css`\n        text {\n            font-family: serif;\n        }\n        text.date,\n        text.string {\n            font-size: 4px;\n        }\n        text.number {\n            font-size: 6px;\n        }\n    `);\n        \n        @state()\n        declare private isLoading;\n\n        private labels = {\n            [AXIS.X]: createRef(),\n            [AXIS.Y]: createRef()\n        };\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        constructor(...args: any[]) {\n            super(args);\n            this.isLoading = true;\n        }\n\n        /* Generator Methods */\n\n        private generateLine(axis: AXIS, lineElements: LineElements): void {\n            const X = GRAPH[AXIS.X];\n            const Y = GRAPH[AXIS.Y];\n\n            lineElements.push(svg`\n                <line\n                    x1=\"${X.START}\" \n                    y1=\"${axis === AXIS.X ? Y.END : Y.START}\" \n                    x2=\"${axis === AXIS.X ? X.END : X.START}\" \n                    y2=\"${Y.END}\"\n                    stoke-width=\"0.5\"\n                    stroke=\"black\"\n                >\n            `);\n        }\n\n        private generateLabels(data: SingleAxisData<AXIS_TYPE>, lineElements: LineElements){\n            if (Array.isArray(data)) {\n                this.generateStrLabels(data, lineElements);\n            } else {\n                this.generateDateNumLabels(data, lineElements);\n            }\n        }\n\n        private generateStrLabels(data: Array<string>, lineElements: LineElements): void {\n            for (let i = data.length; i > 0; i -= 1) {\n                lineElements.push(svg`\n                    <text \n                        x=\"0\" \n                        y=\"0\"\n                        class=\"${AXIS_TYPE.STRING}\">\n                            ${data[i]}\n                    </text>\n                `);\n            }\n        }\n\n        private generateLabelRenderer(type: AXIS_TYPE, interval: number): LabelRenderer {\n            if (type === AXIS_TYPE.NUMBER) {\n                return (val: number) => val.toString();\n            } else if (interval < 3600000) {\n                return (val: number) => new Date(val).toLocaleTimeString();\n            } else if (interval < 86400000) {\n                return (val: number) => {\n                    return (svg`\n                        <tspan>\n                            ${new Date(val).toLocaleDateString()}\n                        </tspan>\n                        <tspan dy=\"0\" dx=\"0\">\n                            ${new Date(val).toLocaleTimeString('en-GB')}\n                        </tspan>\n                    `);\n                };\n            } else {\n                return (val: number) => new Date(val).toLocaleDateString();\n            }\n        }\n        private generateDateNumLabels(data: SingleAxisData<NUM_AXIS_TYPE>, \n            lineElements: LineElements): void {\n            const labelRenderer = this.generateLabelRenderer(data.type, data.interval);\n            \n            for (let i = data.begin; i < data.end + 1; i += data.interval) {\n                lineElements.push(svg`\n                    <text \n                        x=\"0\" \n                        y=\"0\"\n                        class=\"${data.type}\">\n                            ${labelRenderer(i)}\n                    </text>\n                `);\n            }\n        }\n\n        /* Update Methods */\n\n        private updateXDatePos(el: SVGTextElement): void {\n            const dateText = el.querySelectorAll('tspan');\n\n            if (dateText.length == 2) {\n                const [ date, time ] = dateText;\n\n                const { width, height } = date.getBBox();\n    \n                time.setAttribute('dy', height.toString());\n                time.setAttribute('dx', (-width).toString());\n            }\n        }\n\n        private getDimensionAttr(labelsArr: LabelsArr, END: number, isYAxis: boolean) {\n            const totalLabelSize = labelsArr.reduce((size, el) => {\n                if (!isYAxis) {\n                    this.updateXDatePos(el);\n                }\n                const { width, height } = el.getBBox();\n                \n                return size + (isYAxis ? height : width); \n            }, 0);\n\n            return Math.max((END - totalLabelSize)/labelsArr.length, 0);\n        }\n\n        private updateLabels(labelsArr: LabelsArr, END: number, isYAxis: boolean, spacing: number) {\n            const { SPACING_OFFSET } = CONSTANTS;\n            let currentPos = 0;\n            let labelEdge = 0;\n\n            labelsArr.forEach((el) => {\n                const { width, height } = el.getBBox();\n                const x = isYAxis ? -(width + SPACING_OFFSET.Y) : currentPos - (width/2);\n                const y = isYAxis ? currentPos + spacing + height : END + SPACING_OFFSET.X;\n\n                el.setAttribute('x', x.toString());\n                el.setAttribute('y', y.toString());\n\n                currentPos += (isYAxis ? height : width) + spacing;\n\n                if (isYAxis && labelEdge > x) {\n                    labelEdge = x;\n                } else if (labelEdge < y) {\n                    labelEdge = y;\n                }\n            });\n        }\n\n        private updateMeasurementLabels(axis: AXIS): void {\n            const isYAxis = axis === AXIS.Y;\n            const { END } = GRAPH[axis];\n            const labels = this.labels[axis].value?.querySelectorAll('text');\n            \n\n            if (labels?.[Symbol.iterator]) {\n                const labelsArr = Array.from(labels);\n                const spacing = this.getDimensionAttr(labelsArr, END, isYAxis);\n                \n                if(isYAxis) {\n                    labelsArr.reverse();\n                }\n\n                this.updateLabels(labelsArr, END, isYAxis, spacing);\n            }\n        }\n\n        override firstUpdated(): void {\n            this.updateMeasurementLabels(AXIS.X);\n            this.updateMeasurementLabels(AXIS.Y);\n            setTimeout(() => {\n                this.isLoading = false;\n            });\n            \n        }\n\n        private generateAxis(data: SingleAxisData<AXIS_TYPE>, axis: AXIS): LineElements {\n            const lineElements: LineElements = []; \n            this.generateLine(axis, lineElements);\n            this.generateLabels(data, lineElements);\n\n            return lineElements;\n        }\n\n        renderAxis(\n            axisData: AxisData<AXIS_TYPE, AXIS_TYPE> = defaults\n            ): TemplateResult {\n            const { x, y } = axisData;\n\n            return (svg`\n                <g id=\"xLabels\" ${ref(this.labels[AXIS.X])}>\n                    ${this.generateAxis(x, AXIS.X)}\n                </g>\n                <g id=\"yLabels\" ${ref(this.labels[AXIS.Y])}>\n                    ${this.generateAxis(y, AXIS.Y)}\n                </g>\n                ${this.isLoading ? svg `\n                    <rect x=\"-5\" y=\"0\" height=\"100%\" width=\"105%\" fill=\"white\" />\n                    <text x=\"45\" y=\"75\">Loading</text>\n                ` : nothing}\n            `);\n        }\n    }\n    return LitAxisClass as Constructor<LitAxisInterface> & T;\n};\n\n"]}