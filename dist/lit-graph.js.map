{"version":3,"file":"lit-graph.js","sourceRoot":"","sources":["../src/lit-graph.ts"],"names":[],"mappings":"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","sourcesContent":["import {LitElement, html, PropertyValues, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {ref, createRef} from 'lit/directives/ref.js';\nimport {AXIS, AXIS_LABEL_LIMIT, AXIS_TYPE} from './constants';\nimport {LitAxisMixin} from './mixins/lit-axis';\nimport {LitGridMixin} from './mixins/lit-grid';\nimport {LitLabelMixin} from './mixins/lit-label';\nimport {LitLinePlotMixin} from './mixins/lit-line-plot';\nimport {Axis, GraphMeta, AxisType, PlotData, AxisMeta} from './types';\n\nfunction isValidDate(dateStr: string) {\n    const date = Date.parse(dateStr);\n    return !isNaN(date);\n}\nconst defaultSingleAxisData = {begin: 0, end: 0, interval: 0};\nconst Mixin = LitAxisMixin(\n    LitGridMixin(LitLabelMixin(LitLinePlotMixin(LitElement)))\n);\ntype PlotPnt = Axis<AxisType, AxisType>;\n\n/**\n * Lit Graph Component.\n *\n * @data - The data that needs to be graphed. Can take in strings, numbers, or dates\n * @x-label - Main label for the X axis\n * @y-label - Main label for the Y axis\n */\n@customElement('lit-graph')\nexport default class LitGraph extends Mixin {\n\n    static override styles = [\n        Mixin.styles || [],\n        css`\n            svg {\n                height: var(--svg-height, 300px);\n                width: var(--svg-width, 300px)\n            }\n    `];\n    /**\n     * The X axis label\n     */\n    @property({attribute: 'x-label'})\n    declare xLabel;\n\n    /**\n     * The X axis label\n     */\n    @property({attribute: 'y-label'})\n    declare yLabel;\n    /**\n     * Data in JSON array format [{ x: <val>, y:<val> }, ...]\n     */\n    @property({type: Array, attribute: 'data'})\n    declare data: PlotData | null;\n\n    private svg = createRef<SVGSVGElement>();\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor() {\n        super();\n        this.xLabel = '';\n        this.yLabel = '';\n        this.data = null;\n    }\n\n    private getAxisType(singleAxisPoint: AxisType): AXIS_TYPE {\n        if (typeof singleAxisPoint === 'string') {\n            if (isValidDate(singleAxisPoint)) {\n                return AXIS_TYPE.DATE;\n            } else {\n                return AXIS_TYPE.STRING;\n            }\n        } else if (typeof singleAxisPoint === 'number') {\n            return AXIS_TYPE.NUMBER;\n        }\n        throw new Error(\n            `Point ${JSON.stringify(singleAxisPoint)} has a bad data type`\n        );\n    }\n\n    private checkDataIntegrity(\n        {x: currX, y: currY}: PlotPnt,\n        data: PlotData\n    ): void {\n        const {x: firstX, y: firstY} = data[0];\n        const currXType = this.getAxisType(currX);\n        const currYType = this.getAxisType(currY);\n        const firstXType = this.getAxisType(firstX);\n        const firstYType = this.getAxisType(firstY);\n\n        if (currXType !== firstXType || currYType !== firstYType) {\n            throw new Error('Data contains mismatching types');\n        }\n    }\n\n    private getSingleAxisDataStruct(axisType: AXIS_TYPE): AxisMeta<AXIS_TYPE> {\n        switch (axisType) {\n            case AXIS_TYPE.DATE:\n                return {\n                    ...defaultSingleAxisData,\n                    type: AXIS_TYPE.DATE,\n                };\n            case AXIS_TYPE.STRING:\n                return [];\n            case AXIS_TYPE.NUMBER:\n                return {\n                    ...defaultSingleAxisData,\n                    type: AXIS_TYPE.NUMBER,\n                };\n            default:\n                throw new Error(`AxisType ${axisType} is not a valid AxisType`);\n        }\n    }\n\n    private fillAxisMeta(\n        data: AxisMeta<AXIS_TYPE>,\n        axisPnt: AxisType\n    ): AxisMeta<AXIS_TYPE> {\n        if (typeof axisPnt === 'string') {\n            if (Array.isArray(data)) {\n                data.push(axisPnt);\n            } else if (!Array.isArray(data) && data.type === AXIS_TYPE.DATE) {\n                const date = Date.parse(axisPnt);\n\n                data.begin =\n                    data.begin === 0 || data.begin > date ? date : data.begin;\n                data.end = data.end === 0 || data.end < date ? date : data.end;\n                data.interval = Math.ceil(\n                    (data.end - data.begin) / AXIS_LABEL_LIMIT[AXIS_TYPE.DATE]\n                );\n            }\n        } else if (typeof axisPnt === 'number' && !Array.isArray(data)) {\n            data.begin =\n                data.begin === 0 || data.begin > axisPnt ? axisPnt : data.begin;\n            data.end =\n                data.end === 0 || data.end < axisPnt ? axisPnt : data.end;\n            data.interval = Math.ceil(\n                (data.end - data.begin) / AXIS_LABEL_LIMIT[AXIS_TYPE.NUMBER]\n            );\n        }\n\n        return data;\n    }\n\n    private fillGraphMeta = (\n        axisData: GraphMeta,\n        point: PlotPnt,\n        _: number,\n        data: PlotData\n    ) => {\n        this.checkDataIntegrity(point, data);\n        axisData.x = this.fillAxisMeta(axisData.x, point.x);\n        axisData.y = this.fillAxisMeta(axisData.y, point.y);\n\n        return axisData;\n    };\n\n    private getGraphMeta(data: PlotData): GraphMeta {\n        const axisTypes: Axis<AXIS_TYPE, AXIS_TYPE> = {\n            [AXIS.X]: this.getAxisType(data[0].x),\n            [AXIS.Y]: this.getAxisType(data[0].y),\n        };\n\n        const graphMeta = {\n            x: this.getSingleAxisDataStruct(axisTypes[AXIS.X]),\n            y: this.getSingleAxisDataStruct(axisTypes[AXIS.Y]),\n        };\n\n        return data.reduce(this.fillGraphMeta, graphMeta);\n    }\n\n    override updated(changedProperties: PropertyValues): void {\n        super.updated(changedProperties);\n        const svg = this.svg.value;\n        if (svg) {\n            const box = svg.getBBox();\n            const xS = (box && box.x) || 0;\n            const yS = (box && box.y) || 0;\n            const xE = (box && box.width) || 100;\n            const yE = (box && box.height) || 100;\n\n            svg.setAttribute('viewBox', `${xS} ${yS} ${xE} ${yE}`);\n        }\n    }\n\n    override render() {\n        if (!this.data) {\n            throw new Error('No data was passed to Lit-Graph');\n        }\n        const graphMeta = this.getGraphMeta(this.data);\n\n        return html`\n            <svg viewBox=\"0 0 150 150\" ${ref(this.svg)}>\n                ${this.renderGrid()} ${this.renderAxis(graphMeta)}\n                ${this.renderLabels(\n                    {x: this.xLabel, y: this.yLabel},\n                    {x: this.xEdge, y: this.yEdge}\n                )}\n                ${this.renderLinePlot(this.data, graphMeta)}\n            </svg>\n        `;\n    }\n}\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'lit-graph': LitGraph;\n    }\n}\n"]}